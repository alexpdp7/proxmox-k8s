#!/bin/bash

set -ue

HOSTNAME=$1
FQDN=$2
POD_NETWORK_CIDR=$3
OUTPUT=$4

CNI_VERSION="v1.1.1"
ARCH="amd64"
CRICTL_VERSION="v1.23.0"
KUBE_VERSION="v1.23.5"
CRIO_VERSION="v1.23.2"  # x.y.* must match KUBE_VERSION
KUBE_RELEASE="v0.13.0"

ISO_URL=$(curl https://builds.coreos.fedoraproject.org/streams/stable.json | jq -r .architectures.x86_64.artifacts.metal.formats.iso.disk.location)
ISO_FILENAME=$(basename $ISO_URL)

test -f $ISO_FILENAME || wget $ISO_URL

function coreos-installer() {
    docker run -it --rm -v $(pwd):/work -w /work --pull=always -u $(id -u):$(id -g) quay.io/coreos/coreos-installer:release "$@"
}

function butane() {
    docker run -it --rm -v $(pwd):/work -w /work --pull=always -u $(id -u):$(id -g) quay.io/coreos/butane:release "$@"
}

BUTANE_PATH=$(mktemp -p .)

cat >$BUTANE_PATH <<EOF
variant: fcos
version: 1.4.0
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - $(cat ~/.ssh/id_rsa.pub)
storage:
  files:
    - path: /etc/hostname
      mode: 0644
      contents:
        inline: $HOSTNAME
    - path: /usr/local/bin/install_k8s
      mode: 0755
      contents:
        inline: |
          #!/bin/bash -x

          test -f /home/core/.kube/config && exit

          set -ue

          cat <<EOF > /etc/modules-load.d/crio.conf
          overlay
          br_netfilter
          EOF

          modprobe br_netfilter overlay

          cat <<EOF > /etc/sysctl.d/99-kubernetes-cri.conf
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          EOF

          sysctl --system

          which conntrack || {
            while pgrep ostree ; do
              echo waiting for ostree
              sleep 5
            done
            rpm-ostree install conntrack
            echo rebooting for ostree
            systemctl reboot
          }

          systemctl disable --now docker.socket
          systemctl mask docker.service
          systemctl mask containerd.service

          curl https://raw.githubusercontent.com/cri-o/cri-o/main/scripts/get | bash -s -- -t $CRIO_VERSION
          systemctl enable crio --now

          mkdir -p /opt/cni/bin
          curl -L "https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}/cni-plugins-linux-${ARCH}-${CNI_VERSION}.tgz" | tar -C /opt/cni/bin -xz

          (
            cd /usr/local/bin
            curl -L "https://github.com/kubernetes-sigs/cri-tools/releases/download/${CRICTL_VERSION}/crictl-${CRICTL_VERSION}-linux-${ARCH}.tar.gz" | tar -xz

            curl -L --remote-name-all https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/${ARCH}/{kubeadm,kubelet,kubectl}
            chmod +x {kubeadm,kubelet,kubectl}
          )

          curl -sSL "https://raw.githubusercontent.com/kubernetes/release/${KUBE_RELEASE}/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service" | sed "s:/usr/bin:/usr/local/bin:g" > /etc/systemd/system/kubelet.service
          mkdir -p /etc/systemd/system/kubelet.service.d
          curl -sSL "https://raw.githubusercontent.com/kubernetes/release/${KUBE_RELEASE}/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf" | sed "s:/usr/bin:/usr/local/bin:g" > /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

          systemctl enable --now kubelet

          cat <<EOF >/etc/kubeadm.conf
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: InitConfiguration
          nodeRegistration:
            criSocket: /var/run/crio/crio.sock
            kubeletExtraArgs:
              volume-plugin-dir: "/opt/libexec/kubernetes/kubelet-plugins/volume/exec/"
          ---
          kind: ClusterConfiguration
          apiVersion: kubeadm.k8s.io/v1beta3
          kubernetesVersion: $KUBE_VERSION
          controlPlaneEndpoint: "$FQDN:6443"
          controllerManager:
            extraArgs:
              flex-volume-plugin-dir: "/opt/libexec/kubernetes/kubelet-plugins/volume/exec/"
          networking:
            podSubnet: "$POD_NETWORK_CIDR"
          ---
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          cgroupDriver: systemd
          EOF

          kubeadm init --config /etc/kubeadm.conf
          export KUBECONFIG=/etc/kubernetes/admin.conf

          kubectl apply -f https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter.yaml

          kubectl taint nodes --all node-role.kubernetes.io/master-

          kubectl apply -f https://kube-vip.io/manifests/rbac.yaml

          # From the output of:
          #
          # docker run --rm ghcr.io/kube-vip/kube-vip:$(curl -sL https://api.github.com/repos/kube-vip/kube-vip/releases | jq -r ".[0].name") manifest daemonset --ddns --services --arp

          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            creationTimestamp: null
            labels:
              app.kubernetes.io/name: kube-vip-ds
              app.kubernetes.io/version: v0.4.3
            name: kube-vip-ds
            namespace: kube-system
          spec:
            selector:
              matchLabels:
                app.kubernetes.io/name: kube-vip-ds
            template:
              metadata:
                creationTimestamp: null
                labels:
                  app.kubernetes.io/name: kube-vip-ds
                  app.kubernetes.io/version: v0.4.3
              spec:
                containers:
                - args:
                  - manager
                  env:
                  - name: vip_arp
                    value: "true"
                  - name: port
                    value: "6443"
                  - name: vip_cidr
                    value: "32"
                  - name: svc_enable
                    value: "true"
                  - name: vip_address
                  image: ghcr.io/kube-vip/kube-vip:v0.4.3
                  imagePullPolicy: Always
                  name: kube-vip
                  resources: {}
                  securityContext:
                    capabilities:
                      add:
                      - NET_ADMIN
                      - NET_RAW
                  volumeMounts:
                  - mountPath: /etc/kubernetes/admin.conf
                    name: kubeconfig
                hostAliases:
                - hostnames:
                  - kubernetes
                  ip: 127.0.0.1
                hostNetwork: true
                volumes:
                - hostPath:
                    path: /etc/kubernetes/admin.conf
                  name: kubeconfig
            updateStrategy: {}
          status:
            currentNumberScheduled: 0
            desiredNumberScheduled: 0
            numberMisscheduled: 0
            numberReady: 0
          EOF

          kubectl apply -f https://raw.githubusercontent.com/kube-vip/kube-vip-cloud-provider/main/manifest/kube-vip-cloud-controller.yaml

          mkdir -p /home/core/.kube/
          cp /etc/kubernetes/admin.conf /home/core/.kube/config
          chown -R core:core /home/core/.kube
systemd:
  units:
    - name: install_k8s.service
      enabled: true
      contents: |
        [Unit]
        Description=Installs k8s
        After=network-online.target
        Wants=network-online.target
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/local/bin/install_k8s
        [Install]
        WantedBy=multi-user.target
EOF

IGNITION_PATH=$(mktemp -p .)

butane $BUTANE_PATH >$IGNITION_PATH

coreos-installer iso customize $ISO_FILENAME --dest-device=/dev/sda --dest-ignition=$IGNITION_PATH -o $OUTPUT

rm $IGNITION_PATH $BUTANE_PATH
